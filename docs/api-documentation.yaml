openapi: 3.0.0
info:
  title: Social_web_V1
  description: ''
  version: 1.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub Local
    url: http://localhost:3030/api
  - description: DigitalOcean server
    url: https://wonderpeak.uade.susoft.com.ar/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ------------------------------Schemas------------------------------

  schemas:
    GeneralResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful
          example: true
        message:
          type: string
          description: Descriptive message of the response
          example: 'Success.'
        data:
          type: object
          description: Response object (if any) or null

    UserData:
      type: object
      properties:
        userUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        name:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        nickname:
          type: string
          example: 'johndoe123'
        gender:
          type: string
          example: 'male'
        profileUserImage:
          type: string
          example: 'https://example.com/profile.jpg'
        profileCoverImage:
          type: string
          example: 'https://example.com/profileCover.jpg'
        bio:
          type: string
          example: 'Passionate technology developer.'
        followers:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserData'
        following:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserData'
        level:
          type: integer
          example: 10

    ShortUserData:
      type: object
      properties:
        userUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        name:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        nickname:
          type: string
          example: 'johndoe123'
        profileUserImage:
          type: string
          example: 'https://example.com/images/profile.jpg'
          description: 'URL of the userÂ´s profile image.'
        level:
          type: integer
          example: 10

    Post:
      type: object
      properties:
        postUuid:
          type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
        title:
          type: string
          example: 'Nature Adventures'
        text:
          type: string
          example: 'Exploring the vast forests!'
        user:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserData'
        location:
          type: object
          description: 'The geographic location related to the post.'
          properties:
            latitude:
              type: integer
              description: 'Latitude of the location.'
              example: 17.562
            longitude:
              type: integer
              description: 'Longitude of the location.'
              example: -3.625
            mapsUrl:
              type: string
              description: 'URL to view the location on Google Maps.'
              example: 'https://maps.app.goo.gl/3u6hnvrzZTV4WeVw5'
            placeHolder:
              type: string
              description: 'A placeHolder for the location to show in our app.'
              example: 'Tropitango'
        multimediaUrl:
          type: string
          example: 'https://example.com/image.jpg'
        commentsCount:
          type: integer
          example: 5
        liked:
          type: boolean
          example: true
        favorite:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2021-07-16T19:20:30Z'
    Ad:
      type: object
      properties:
        commerceName:
          type: string
          example: 'Adventure Works'
          description: 'Name of the commerce.'
        commerceUrl:
          type: string
          example: 'https://adventure-works.com'
          description: 'URL of the commerce website.'
        commerceImage:
          type: string
          example: 'https://example.com/commerce-image.jpg'
          description: 'URL of the commerce image.'
        multimediaUrl:
          type: string
          example: 'https://example.com/multimedia-portrait.jpg'
          description: 'URL of the multimedia content in portrait orientation.'
        title:
          type: string
          example: 'Exciting New Adventure Awaits!'
          description: 'Title of the advertisement.'
        text:
          type: string
          example: 'Join us for an unforgettable adventure at Adventure Works.'
          description: 'Text content of the advertisement.'
        startDate:
          type: string
          format: date-time
          example: '2023-01-01T12:00:00Z'
          description: 'Start date of the ad display in a human-readable format (ISO 8601).'
        endDate:
          type: string
          format: date-time
          example: '2023-01-01T12:00:00Z'
          description: 'End date of the ad display in a human-readable format (ISO 8601).'
    Comment:
      type: object
      properties:
        commentUuid:
          type: string
          format: uuid
          description: Unique identifier for the comment.
        userUuid:
          type: string
          format: uuid
          description: Unique identifier of the user who made the comment.
        postUuid:
          type: string
          format: uuid
          description: Unique identifier of the post to which the comment belongs.
        text:
          type: string
          description: Text of the comment.
        date:
          type: string
          format: date-time
          description: Date and time the comment was made.

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: 'Current page number'
        limit:
          type: integer
          example: 10
          description: 'Number of posts per page'
        count:
          type: integer
          example: 10
          description: 'Number of posts returned on the current page'
        totalCount:
          type: integer
          example: 50
          description: 'Total number of posts available'
        totalPages:
          type: integer
          example: 5
          description: 'Total number of pages available'
      required:
        - page
        - limit
        - count
        - totalCount
        - totalPages

    NotFound-404:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'Error code refered in our sistem'
          example: 40401
        message:
          type: string
          description: 'Description of the validation error'
          example: 'Invalid input data'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - example
        - timestamp

    ValidationError-400:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'HTTP error code'
          example: 400
        message:
          type: string
          description: 'Description of the validation error'
          example: 'Invalid input data'
        errors:
          type: object
          description: 'Detailed validation errors for specific fields'
          additionalProperties:
            type: string
          example:
            title: 'Title is required'
            text: 'Text must be at least 10 characters long'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - errors
        - timestamp

    UnauthorizedError-401:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'HTTP error code'
          example: 401
        message:
          type: string
          description: 'Error description indicating lack of authorization'
          example: 'Unauthorized'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - timestamp

    ForbiddenError-403:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'HTTP error code'
          example: 403
        message:
          type: string
          description: 'Error indicating the user does not have permission'
          example: 'User does not have permission to create a post'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - timestamp

    InternalServerError-500:
      type: object
      properties:
        success:
          type: boolean
          example: false
        code:
          type: integer
          description: 'HTTP error code'
          example: 500
        message:
          type: string
          description: 'Generic server error message'
          example: 'An unexpected error occurred on the server'
        timestamp:
          type: integer
          description: 'Unix timestamp of when the error occurred'
          example: 1633017600
      required:
        - code
        - message
        - timestamp

tags:
  - name: 'Auth'
    description: 'Operations related to authentication'
  - name: 'User'
    description: 'Operations related to users'
  - name: 'Following/Followers'
    description: 'Operations related to Followers/Following'
  - name: 'Posts'
    description: 'Operations related to posts'
  - name: 'Comments'
    description: 'Operations related to Comments'

paths:
  #------------------------ Auth Routes ------------------------#
  /auth/login:
    post:
      tags:
        - 'Auth'
      summary: 'User login'
      description: 'Authenticates the user and returns a JWT.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
                password:
                  type: string
                  example: 'securePassword123'
      responses:
        '200':
          description: 'Login successful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User login successfully'
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
                      refreshToken:
                        type: string
                        example: 'dGhpcy5pcy5hLnJlZnJlc2gudG9rZW4uZXhhbXBsZQ=='
                      issued:
                        type: integer
                        example: 1633022800
                      validAT:
                        type: integer
                        example: 1633
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
  /auth/push-token:
    post:
      tags:
        - 'Auth'
      summary: 'Register pushNotification token'
      description: 'Register user pushNotification token with the JWT.'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 'ExponentPushToken[fIi68HJ3tD6HQOKvBwD-Mi]'
      responses:
        '200':
          description: 'Login successful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User Token successfully register'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /auth/register:
    post:
      tags:
        - 'Auth'
      summary: 'User registration'
      description: 'Registers a new user.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
                name:
                  type: string
                  example: 'John'
                lastname:
                  type: string
                  example: 'Doe'
                nickname:
                  type: string
                  example: 'jdoe'
                gender:
                  type: string
                  enum: [male, female, other]
                  example: 'male'
                password:
                  type: string
                  example: 'securePassword123'
      responses:
        '201':
          description: 'User registration completed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'
  /auth/logout:
    post:
      tags:
        - 'Auth'
      summary: 'User logout'
      description: 'Logs out the user.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Session closed'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /auth/forgot_password:
    post:
      tags:
        - 'Auth'
      summary: 'Send password reset email'
      description: 'Sends an email to reset the userÂ´s password.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@example.com'
      responses:
        '200':
          description: 'Email sent successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '400':
          description: 'Error in the provided email'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /auth/reset_password:
    post:
      tags:
        - 'Auth'
      summary: 'Reset password'
      description: 'Allows the user to reset their password using a reset token.'
      parameters:
        - in: query
          name: resetToken
          required: true
          schema:
            type: string
            format: string
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
            description: 'Token that the user received in their email.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contraseÃ±a:
                  type: string
                  example: 'newSecurePassword123'
      responses:
        '200':
          description: 'Password reset successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'Resource not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  #------------------------ User Routes ------------------------#

  /users:
    get:
      tags:
        - 'User'
      summary: 'Search for users by name, last name, or nickname'
      description: 'Allows searching for users in the system by their name, last name, or nickname. Supports pagination for large result sets.'
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
          example: 'Paul'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: 'Page number for user pagination.'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            description: 'Number of users to retrieve per page.'
      responses:
        '200':
          description: 'User information retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User found successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'User not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
  /users/me:
    get:
      tags:
        - 'User'
      summary: 'Get user data by JWT'
      description: 'Returns user data'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'User information retrieved successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Success.'
                  data:
                    $ref: '#/components/schemas/UserData'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
    put:
      tags:
        - 'User'
      summary: 'Update user data'
      description: 'Allows a logged in user to update personal data'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'John'
                lastname:
                  type: string
                  example: 'Doe'
                nickname:
                  type: string
                  example: 'johndoe123'
                bio:
                  type: string
                  example: 'I am a passionate creative designer'
                gender:
                  type: string
                  example: 'male'
                profileUserImage:
                  type: string
                  format: binary
                  description: 'Profile image file'
                profileCoverImage:
                  type: string
                  format: binary
                  description: 'Cover image file'
      responses:
        '200':
          description: 'User data updated successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User data updated successfully.'
                  data:
                    $ref: '#/components/schemas/UserData'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
    delete:
      tags:
        - User
      summary: 'Deletes user.'
      description: 'Deletes user.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'User deleted succesfully'
          content:
            application/json:
              examples:
                SuccessfulResponse:
                  value:
                    message: 'User deleted succesfully'
                    success: true
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
          description: 'Unauthorized'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
          description: 'User not found'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
  /users/me/password:
    put:
      tags:
        - 'User'
      summary: 'Update user password'
      description: 'Allows a logged in user to update password'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: 'securePassword123'
                newPassword:
                  type: string
                  example: 'newSecurePassword123'
      responses:
        '200':
          description: 'User data updated succesfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User signed out.'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /users/{userUuid}:
    get:
      tags:
        - 'User'
      summary: 'Get user by UUID'
      description: 'Retrieves user data by UUID'
      security:
        - bearerAuth: []
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'User information retrieved successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User information retrieved successfully.'
                  data:
                    allOf:
                      - $ref: '#/components/schemas/UserData'
                      - type: object
                        properties:
                          imFollower:
                            type: boolean
                            description: Indicates if the user is following this user.
                          isFollowing:
                            type: boolean
                            description: Indicates if this user is following the logged-in user.
                          isFavorite:
                            type: boolean
                            description: Indicates if this user is marked as a favorite.
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'

  /users/{userUuid}/followers:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Get followers list'
      description: 'Gets followers by user UUID'
      security:
        - bearerAuth: []
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Followers list successfully retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Success'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'User not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

    delete:
      tags:
        - 'Following/Followers'
      summary: 'Delete a follower'
      description: 'Deletes user from followers list'
      security:
        - bearerAuth: []
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'User deletion completed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'User not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /users/{userUuid}/following:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Get following list'
      description: 'Get following list by UUID.'
      security:
        - bearerAuth: []
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Following list retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Success'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'User not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

    put:
      tags:
        - 'Following/Followers'
      summary: 'Follow or stop following a user'
      description: 'Adds a user to following list'
      security:
        - bearerAuth: []
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'The user was successfully followed or unfollowed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'User not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /users/{userUuid}/favorites:
    get:
      tags:
        - 'Following/Followers'
      summary: 'Get favorites list'
      description: 'Gets user favorites list'
      security:
        - bearerAuth: []
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Favorites list successfully retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Success'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ShortUserData'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'User not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

    put:
      tags:
        - 'Following/Followers'
      summary: 'Add or delete user to favorites list'
      description: 'Adds or deletes user to favorites list by UUID'
      security:
        - bearerAuth: []
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: 12345
      responses:
        '200':
          description: 'The user was successfully added to or removed from the favorites list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'User not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  #------------------------ posts Routes ------------------------#
  /posts:
    post:
      tags:
        - 'Posts'
      summary: 'Create a post'
      description: 'Create a post and return the created post. The multimedia file should be sent as part of a multipart/form-data request.'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: |
          Create a post by providing the required fields and attaching the multimedia file as part of a `multipart/form-data` request. Below is an example of the expected structure for text fields:

          - **title**: The title of the post (string).
          - **text**: A detailed description of the post content (string).
          - **location**: A JSON string containing location details, including latitude, longitude, and maps URL.
          - **multimediaFile**: The multimedia file (image or video) attached directly in the `multipart/form-data`.

          Example request:
          ```
          Content-Type: multipart/form-data

          title=Nature Adventures
          text=Exploring the vast forests!
          location={"placeHolder": "Tropitango", "latitude": 17.562, "longitude": -3.625, "mapsUrl": "https://maps.app.goo.gl/3u6hnvrzZTV4WeVw5"}
          multimediaFile=<attached file>
          ```
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the post. This is a short descriptive title.'
                text:
                  type: string
                  description: 'A detailed description of the post content.'
                multimediaFileType:
                  type: string
                  description: 'Type of the file to upload.'
                  example: 'image/png or video/mp4'
                location:
                  type: string
                  format: JSON
                  description: 'A JSON string representing the location object, including latitude, longitude, and maps URL.'
                  example: '{"placeHolder": "Tropitango","latitude": 17.562, "longitude": -3.625, "mapsUrl": "https://maps.app.goo.gl/example"}'
                multimediaFile:
                  type: string
                  format: binary
                  description: 'The multimedia file (image or video) to be uploaded, such as JPG, PNG, or MP4.'
      responses:
        '200':
          description: 'Post created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Post created successfully'
                  data:
                    $ref: '#/components/schemas/Post'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError-400'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /posts/user/{userUuid}:
    get:
      tags:
        - 'Posts'
      summary: 'Get all userÂ´s posts'
      description: 'Returns a paginated list of posts of an user.'
      security:
        - bearerAuth: []
      parameters:
        - name: userUuid
          in: path
          required: true
          schema:
            type: string
          example: 'asdasdsgawtc'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: 'Page number for post pagination.'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            description: 'Page number for post pagination.'
      responses:
        '200':
          description: 'Posts list retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Posts retrieved successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /posts/{postUuid}:
    get:
      tags:
        - 'Posts'
      summary: 'Get a post'
      description: 'Returns a post by its UUID'
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Post retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Post retrieved successfully'
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: 'Post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Post not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
    put:
      tags:
        - 'Posts'
      summary: 'Update a post'
      description: 'Allows the user to update an existing post.'
      security:
        - bearerAuth: []
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  nullable: true
                  example: 'Nature Adventures'
                text:
                  type: string
                  nullable: true
                  example: 'Exploring the vast forests!'
                latitude:
                  type: integer
                  description: 'Latitude of the location.'
                  example: 17.562
                longitude:
                  type: integer
                  description: 'Longitude of the location.'
                  example: -3.625
                mapsUrl:
                  type: string
                  description: 'URL to view the location on Google Maps.'
                  example: 'https://maps.app.goo.gl/3u6hnvrzZTV4WeVw5'
                multimediaUrl:
                  type: string
                  nullable: true
                  example: 'https://example.com/image.jpg'
      responses:
        '200':
          description: 'Post updated successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Post updated successfully'
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: 'Post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Post not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

    delete:
      tags:
        - 'Posts'
      summary: 'Delete a post'
      description: 'Allows the user to delete an existing post.'
      security:
        - bearerAuth: []
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      responses:
        '200':
          description: 'Post deleted successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '404':
          description: 'Post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /posts/{postUuid}/favorite:
    put:
      tags:
        - 'Posts'
      summary: 'Add or remove a post to favorites list'
      description: 'Add or remove a post to favorites list'
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Post added or remove to favorites successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Post added or remove to favorites successfully'
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: 'Post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Post not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /posts/{postUuid}/like:
    put:
      tags:
        - 'Posts'
      summary: 'Like or remove like a post'
      description: 'Like or unlike a post'
      parameters:
        - name: postUuid
          in: path
          required: true
          schema:
            type: string
          example: '66a3e747-2065-49ed-bb62-50ac084742bf'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Post liked toggle successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Post liked toggle successfully'
                  data:
                    $ref: '#/components/schemas/Post'
        '404':
          description: 'Post not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
              examples:
                NotFoundExample:
                  value:
                    success: false
                    code: 404
                    message: 'Post not found'
                    timestamp: 1633017600
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /posts/feed:
    get:
      tags:
        - 'Posts'
      summary: 'Get the feed'
      description: 'Returns a paginated list of posts and ads for the userâs feed, where an ad appears after every 3 posts.'
      security:
        - bearerAuth: []
      parameters:
        - name: mine
          in: query
          required: false
          schema:
            type: boolean
            default: true
            description: "If true, the endpoint will include your posts in the results. If false, it will return only the posts from your followings. If you don't follow anyone, it will return all posts in descending order."
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: 'Page number for feed pagination.'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            description: 'Page number for feed pagination.'
      responses:
        '200':
          description: 'Feed list retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Feed retrieved successfully'
                  data:
                    type: array
                    description: 'List of posts and ads, where an ad appears after every 3 posts.'
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Post'
                        - $ref: '#/components/schemas/Ad'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  /posts/favorites:
    get:
      tags:
        - 'Posts'
      summary: 'Get the favorites posts by JWT'
      description: 'Returns a paginated list of favorites posts for the userâs favorites list.'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: 'Page number for feed pagination.'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            description: 'Page number for feed pagination.'
      responses:
        '200':
          description: 'Favorites list retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Favorites list retrieved'
                  data:
                    type: array
                    description: 'List of posts and ads, where an ad appears after every 3 posts.'
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

  #------------------------ comments Routes ------------------------#

  /comments/post/{postUuid}:
    get:
      tags:
        - 'Comments'
      summary: 'Get all the comments'
      description: 'Returns a paginated list of comments.'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the post.
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            description: 'Page number for comments pagination.'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            description: 'Page number for comments pagination.'
      responses:
        '200':
          description: 'PostÂ´s comments list retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'PostÂ´s comments retrieved successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
    post:
      tags:
        - 'Comments'
      summary: Create a new comment.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      parameters:
        - in: path
          name: postUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the post.
      responses:
        '200':
          description: Comment successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment successfully created.'
                  data:
                    $ref: '#/components/schemas/Comment'

        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError-400'

  /comments/{commentUuid}:
    get:
      tags:
        - 'Comments'
      summary: Retrieve a comment by its ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the comment.
      responses:
        '200':
          description: 'Comment information successfully retrieved'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment information successfully retrieved'
                  data:
                    $ref: '#/components/schemas/Comment'
        '404':
          description: 'Comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

    put:
      tags:
        - 'Comments'
      summary: Update an existing comment.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the comment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment information updated successfully'
                  data:
                    $ref: '#/components/schemas/Comment'
        '404':
          description: 'Comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'

    delete:
      tags:
        - 'Comments'
      summary: Delete a comment.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentUuid
          required: true
          schema:
            type: string
            format: uuid
            example: '66a3e747-2065-49ed-bb62-50ac084742bf'
          description: Unique identifier for the comment.
      responses:
        '200':
          description: Comment deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Comment deleted successfully.'
        '404':
          description: 'Comment not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound-404'
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError-401'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError-500'
